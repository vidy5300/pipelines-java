trigger:
  - main

variables:
  GITHUB_REPO: https://$(GITHUB_PAT)@github.com/vidy5300/pipelines-java.git

jobs:
  # -----------------------------------
  # ðŸš§ Build Job â€“ Single Configuration
  # -----------------------------------
  - job: Build
    displayName: "Build Job"
    pool:
      vmImage: ubuntu-latest
    variables:
      jdkVersion: "1.11"
    steps:
      - script: |
          echo "Updating Git remote URL to include token..."
          git remote set-url origin $(GITHUB_REPO)
          git fetch --unshallow || true
        displayName: "Set GitHub remote with PAT"

      - task: Maven@4
        name: BuildStep
        inputs:
          mavenPomFile: "pom.xml"
          mavenOptions: "-Xmx3072m"
          javaHomeOption: "JDKVersion"
          jdkVersionOption: $(jdkVersion)
          jdkArchitectureOption: "x64"
          goals: "clean package"
        displayName: "Maven Build"

      - script: |
          mv target/helloworld.war target/ROOT.war
        displayName: "Rename WAR to ROOT.war"

      - task: PublishBuildArtifacts@1
        inputs:
          PathtoPublish: "target"
          ArtifactName: "build-output"
          publishLocation: "Container"
        displayName: "Publish Build Artifacts"

  # -----------------------------------
  # ðŸ§ª Test Job â€“ Matrix (Decoupled)
  # -----------------------------------
  - job: Test
    displayName: "Test Job"
    dependsOn: Build
    strategy:
      matrix:
        linux_jdk11:
          imageName: "ubuntu-latest"
          jdkVersion: "1.11"
        windows_jdk11:
          imageName: "windows-latest"
          jdkVersion: "1.11"
      maxParallel: 3
    pool:
      vmImage: $(imageName)

    steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: "current"
          downloadType: "single"
          artifactName: "build-output"
          downloadPath: "$(Pipeline.Workspace)/downloaded-artifacts"
        displayName: "Download Build Artifacts"

      - script: |
          echo "Downloaded contents:"
          ls -R $(Pipeline.Workspace)/downloaded-artifacts
        displayName: "Debug: List Downloaded Artifacts"

      - task: Maven@4
        name: TestStep
        inputs:
          mavenPomFile: "pom.xml"
          mavenOptions: "-Xmx3072m"
          javaHomeOption: "JDKVersion"
          jdkVersionOption: $(jdkVersion)
          jdkArchitectureOption: "x64"
          publishJUnitResults: true
          testResultsFiles: "**/surefire-reports/TEST-*.xml"
          goals: "test"
        displayName: "Maven Test"

      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: "JaCoCo"
          summaryFileLocation: "target/site/jacoco/jacoco.xml"
          reportDirectory: "target/site/jacoco"
          failIfCoverageEmpty: true

  # -----------------------------------
  # ðŸ§ª Deploy Job
  # -----------------------------------
  - job: Deploy
    displayName: "Deploy to Azure App Service"
    dependsOn: Test # or Test, depending on your structure
    pool:
      vmImage: ubuntu-latest

    steps:
      - task: DownloadBuildArtifacts@0
        inputs:
          buildType: "current"
          downloadType: "single"
          artifactName: "build-output"
          downloadPath: "$(Pipeline.Workspace)/downloaded-artifacts"
        displayName: "Download WAR Artifact"

      - script: |
          echo "Verifying WAR file:"
          ls -l $(Pipeline.Workspace)/downloaded-artifacts/build-output/ROOT.war
        displayName: "Verify WAR Exists"

      - task: AzureWebApp@1
        displayName: "Deploy WAR to Azure App Service"
        inputs:
          azureSubscription: "TestPipelineAzureServiceConnection" # Replace with your actual service connection name
          appType: "webAppLinux" # Use 'webApp' for Windows
          appName: "helloworld-test" # Replace with your actual App Service name
          package: "$(Pipeline.Workspace)/downloaded-artifacts/build-output/ROOT.war"
